import { useState, useEffect } from 'react';
import { WordBank } from './components/WordBank';
import { Training } from './components/Training';
import { Progress, QuizResult } from './components/Progress';
import { PasswordProtection } from './components/PasswordProtection';
import { Button } from './components/ui/button';
import { Card } from './components/ui/card';
import { Input } from './components/ui/input';
import { Label } from './components/ui/label';
import { useToast } from './components/ui/toast';
import { BookOpen, Target, HelpCircle, BarChart3, Star } from './components/icons';
import { MobileInstallPrompt } from './components/MobileInstallPrompt';

export type Word = {
  id: string;
  english: string;
  translation: string;
  category: string;
};

export type Category = {
  id: string;
  name: string;
  icon: string;
  color: string;
};

const defaultCategories: Category[] = [
  { id: 'animals', name: '–ñ–∏–≤–æ—Ç–Ω—ã–µ', icon: 'üê∂', color: 'bg-green-100 text-green-700' },
  { id: 'food', name: '–ï–¥–∞', icon: 'üçè', color: 'bg-yellow-100 text-yellow-700' },
  { id: 'school', name: '–®–∫–æ–ª–∞', icon: 'üéí', color: 'bg-blue-100 text-blue-700' },
  { id: 'family', name: '–°–µ–º—å—è', icon: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶', color: 'bg-purple-100 text-purple-700' },
  { id: 'toys', name: '–ò–≥—Ä—É—à–∫–∏', icon: 'üß∏', color: 'bg-pink-100 text-pink-700' },
  { id: 'colors', name: '–¶–≤–µ—Ç–∞', icon: 'üé®', color: 'bg-indigo-100 text-indigo-700' },
];

export default function App() {
  const [activeTab, setActiveTab] = useState<'words' | 'training' | 'progress' | 'help'>('training');
  const [categories, setCategories] = useState<Category[]>(defaultCategories);
  const [words, setWords] = useState<Word[]>([
    { id: '1', english: 'cat', translation: '–∫–æ—Ç', category: 'animals' },
    { id: '2', english: 'dog', translation: '—Å–æ–±–∞–∫–∞', category: 'animals' },
    { id: '3', english: 'apple', translation: '—è–±–ª–æ–∫–æ', category: 'food' },
    { id: '4', english: 'book', translation: '–∫–Ω–∏–≥–∞', category: 'school' },
    { id: '5', english: 'red', translation: '–∫—Ä–∞—Å–Ω—ã–π', category: 'colors' },
  ]);
  const [telegramBotToken, setTelegramBotToken] = useState<string>('');
  const [telegramChatId, setTelegramChatId] = useState<string>('');
  const [isWordBankUnlocked, setIsWordBankUnlocked] = useState<boolean>(false);
  const [quizResults, setQuizResults] = useState<QuizResult[]>([]);
  const [totalPoints, setTotalPoints] = useState<number>(0);
  const { addToast, ToastContainer } = useToast();

  // Load progress from localStorage on mount
  useEffect(() => {
    const savedResults = localStorage.getItem('word-trainer-results');
    const savedPoints = localStorage.getItem('word-trainer-points');
    
    if (savedResults) {
      try {
        const results = JSON.parse(savedResults);
        setQuizResults(results);
      } catch (error) {
        console.error('Error loading results:', error);
      }
    }
    
    if (savedPoints) {
      setTotalPoints(parseInt(savedPoints, 10) || 0);
    }
  }, []);

  // Save progress to localStorage when results change
  useEffect(() => {
    localStorage.setItem('word-trainer-results', JSON.stringify(quizResults));
  }, [quizResults]);

  useEffect(() => {
    localStorage.setItem('word-trainer-points', totalPoints.toString());
  }, [totalPoints]);

  const addWord = (word: Omit<Word, 'id'>) => {
    const newWord = { ...word, id: Date.now().toString() };
    setWords(prev => [...prev, newWord]);
  };

  const updateWord = (id: string, updates: Partial<Word>) => {
    setWords(prev => prev.map(word => word.id === id ? { ...word, ...updates } : word));
  };

  const deleteWord = (id: string) => {
    setWords(prev => prev.filter(word => word.id !== id));
  };

  const addCategory = (category: Omit<Category, 'id'>) => {
    const newCategory = { ...category, id: Date.now().toString() };
    setCategories(prev => [...prev, newCategory]);
  };

  const handleQuizComplete = (result: QuizResult) => {
    setQuizResults(prev => [result, ...prev]);
    setTotalPoints(prev => prev + result.points);
    
    // Show toast notification for points earned
    addToast(`üéâ –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ ${result.points} –±–∞–ª–ª–æ–≤!`, 'success');
  };

  const clearProgress = () => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
      setQuizResults([]);
      setTotalPoints(0);
      localStorage.removeItem('word-trainer-results');
      localStorage.removeItem('word-trainer-points');
    }
  };

  const sendResultsToTelegram = async (results: any) => {
    if (!telegramBotToken || !telegramChatId) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Telegram –±–æ—Ç–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç"');
      return;
    }

    const message = `
üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ Word Trainer

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${results.correctAnswers}/${results.totalQuestions}
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: ${results.scorePercentage}%
‚Ä¢ –ë–∞–ª–ª—ã: +${results.points}
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${results.category}
‚Ä¢ –†–µ–∂–∏–º: ${results.mode === 'en-to-ru' ? '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π ‚Üí –†—É—Å—Å–∫–∏–π' : '–†—É—Å—Å–∫–∏–π ‚Üí –ê–Ω–≥–ª–∏–π—Å–∫–∏–π'}

${results.mistakes.length > 0 ? `
‚ùå –û—à–∏–±–∫–∏:
${results.mistakes.map((mistake: any, index: number) => 
  `${index + 1}. ${mistake.question.word.english} ‚Üí ${mistake.question.word.translation}`
).join('\n')}
` : 'üéâ –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ!'}
    `.trim();

    try {
      const response = await fetch(`https://api.telegram.org/bot${telegramBotToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: telegramChatId,
          text: message,
          parse_mode: 'HTML'
        })
      });

      if (response.ok) {
        alert('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram!');
      } else {
        throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
      }
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.');
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50">
      {/* Header */}
      <header className="bg-white/80 backdrop-blur-sm border-b border-purple-100 sticky top-0 z-50">
        <div className="max-w-6xl mx-auto px-2 sm:px-4 py-3 sm:py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2 sm:gap-3">
              <div className="w-8 h-8 sm:w-10 sm:h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-xl flex items-center justify-center">
                <BookOpen className="w-4 h-4 sm:w-6 sm:h-6 text-white" />
              </div>
              <div>
                <h1 className="text-lg sm:text-xl font-bold text-gray-800">–¢—Ä–µ–Ω–µ—Ä —Å–ª–æ–≤</h1>
                <p className="text-xs sm:text-sm text-gray-600 hidden sm:block">–ò–∑—É—á–∞–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ –≤–µ—Å–µ–ª–æ!</p>
              </div>
            </div>
            <div className="flex items-center gap-3 sm:gap-6">
              <div className="text-right">
                <p className="text-xs sm:text-sm text-gray-600">–ë–∞–ª–ª—ã</p>
                <div className="flex items-center gap-1">
                  <Star className="w-3 h-3 sm:w-4 sm:h-4 text-yellow-500" />
                  <p className="text-lg sm:text-xl font-bold text-yellow-600">{totalPoints}</p>
                </div>
              </div>
              <div className="text-right">
                <p className="text-xs sm:text-sm text-gray-600">–°–ª–æ–≤</p>
                <p className="text-lg sm:text-2xl font-bold text-purple-600">{words.length}</p>
              </div>
            </div>
          </div>
        </div>
      </header>

      {/* Navigation */}
      <nav className="bg-white/60 backdrop-blur-sm border-b border-purple-100">
        <div className="max-w-6xl mx-auto px-2 sm:px-4">
          <div className="flex gap-0.5 sm:gap-1 overflow-x-auto">
            <Button
              variant={activeTab === 'training' ? 'default' : 'ghost'}
              onClick={() => setActiveTab('training')}
              className={`rounded-none border-b-2 text-xs sm:text-sm px-2 sm:px-3 py-2 flex-shrink-0 ${
                activeTab === 'training' 
                  ? 'border-green-500 bg-green-50 text-green-700' 
                  : 'border-transparent hover:border-green-200'
              }`}
            >
              <Target className="w-3 h-3 sm:w-4 sm:h-4 mr-1 sm:mr-2" />
              <span className="hidden sm:inline">–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞</span>
              <span className="sm:hidden">–¢–µ—Å—Ç</span>
            </Button>
            <Button
              variant={activeTab === 'progress' ? 'default' : 'ghost'}
              onClick={() => setActiveTab('progress')}
              className={`rounded-none border-b-2 text-xs sm:text-sm px-2 sm:px-3 py-2 flex-shrink-0 ${
                activeTab === 'progress' 
                  ? 'border-orange-500 bg-orange-50 text-orange-700' 
                  : 'border-transparent hover:border-orange-200'
              }`}
            >
              <BarChart3 className="w-3 h-3 sm:w-4 sm:h-4 mr-1 sm:mr-2" />
              –ü—Ä–æ–≥—Ä–µ—Å—Å
            </Button>
            <Button
              variant={activeTab === 'words' ? 'default' : 'ghost'}
              onClick={() => setActiveTab('words')}
              className={`rounded-none border-b-2 text-xs sm:text-sm px-2 sm:px-3 py-2 flex-shrink-0 ${
                activeTab === 'words' 
                  ? 'border-purple-500 bg-purple-50 text-purple-700' 
                  : 'border-transparent hover:border-purple-200'
              }`}
            >
              <BookOpen className="w-3 h-3 sm:w-4 sm:h-4 mr-1 sm:mr-2" />
              <span className="hidden sm:inline">–ë–∞–Ω–∫ —Å–ª–æ–≤</span>
              <span className="sm:hidden">–°–ª–æ–≤–∞</span>
            </Button>
            <Button
              variant={activeTab === 'help' ? 'default' : 'ghost'}
              onClick={() => setActiveTab('help')}
              className={`rounded-none border-b-2 text-xs sm:text-sm px-2 sm:px-3 py-2 flex-shrink-0 ${
                activeTab === 'help' 
                  ? 'border-blue-500 bg-blue-50 text-blue-700' 
                  : 'border-transparent hover:border-blue-200'
              }`}
            >
              <HelpCircle className="w-3 h-3 sm:w-4 sm:h-4 mr-1 sm:mr-2" />
              <span className="hidden sm:inline">–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç</span>
              <span className="sm:hidden">–ü–æ–º–æ—â—å</span>
            </Button>
          </div>
        </div>
      </nav>

      {/* Main Content */}
      <main className="max-w-6xl mx-auto px-2 sm:px-4 py-4 sm:py-8">
        {activeTab === 'training' && (
          <Training 
            words={words} 
            categories={categories}
            totalPoints={totalPoints}
            onSendResultsToTelegram={sendResultsToTelegram}
            onQuizComplete={handleQuizComplete}
          />
        )}
        {activeTab === 'progress' && (
          <Progress
            results={quizResults}
            totalPoints={totalPoints}
            onClearProgress={clearProgress}
          />
        )}
        {activeTab === 'words' && (
          isWordBankUnlocked ? (
            <WordBank
              words={words}
              categories={categories}
              onAddWord={addWord}
              onUpdateWord={updateWord}
              onDeleteWord={deleteWord}
              onAddCategory={addCategory}
            />
          ) : (
            <PasswordProtection onPasswordCorrect={() => setIsWordBankUnlocked(true)} />
          )
        )}
        {activeTab === 'help' && (
          <div className="space-y-6">
            <Card className="p-4 sm:p-6">
              <h2 className="text-xl sm:text-2xl font-bold text-gray-800 mb-4">–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –¢—Ä–µ–Ω–µ—Ä —Å–ª–æ–≤ üéØ</h2>
              <div className="space-y-4">
                <div className="flex items-start gap-3">
                  <div className="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center flex-shrink-0 mt-1">
                    <span className="text-purple-600 font-bold">1</span>
                  </div>
                  <div>
                    <h3 className="font-bold text-gray-700">–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –±–∞–Ω–∫ —Å–ª–æ–≤</h3>
                    <p className="text-gray-600">–î–æ–±–∞–≤—å—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ —Å —Ä—É—Å—Å–∫–∏–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –∏ –æ—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ –∏—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, —Ç–∞–∫–∏–º –∫–∞–∫ –ñ–∏–≤–æ—Ç–Ω—ã–µ, –ï–¥–∞ –∏–ª–∏ –®–∫–æ–ª–∞.</p>
                  </div>
                </div>
                <div className="flex items-start gap-3">
                  <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center flex-shrink-0 mt-1">
                    <span className="text-green-600 font-bold">2</span>
                  </div>
                  <div>
                    <h3 className="font-bold text-gray-700">–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É</h3>
                    <p className="text-gray-600">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ (5, 10 –∏–ª–∏ 20) –∏ —Ä–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–æ–≤.</p>
                  </div>
                </div>
                <div className="flex items-start gap-3">
                  <div className="w-8 h-8 bg-yellow-100 rounded-full flex items-center justify-center flex-shrink-0 mt-1">
                    <span className="text-yellow-600 font-bold">3</span>
                  </div>
                  <div>
                    <h3 className="font-bold text-gray-700">–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –∏ –∏–∑—É—á–∞–π—Ç–µ</h3>
                    <p className="text-gray-600">–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç–≤–µ—Ç–∞ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å. –ó–µ–ª–µ–Ω—ã–π –æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∫—Ä–∞—Å–Ω—ã–π - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!</p>
                  </div>
                </div>
                <div className="flex items-start gap-3">
                  <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0 mt-1">
                    <span className="text-blue-600 font-bold">4</span>
                  </div>
                  <div>
                    <h3 className="font-bold text-gray-700">–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å</h3>
                    <p className="text-gray-600">–°–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–æ–π —Å—á–µ—Ç –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –≤–ª–∞–¥–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä–µ–º.</p>
                  </div>
                </div>
              </div>
            </Card>
            
            <Card className="p-4 sm:p-6">
              <h3 className="text-lg sm:text-xl font-bold text-gray-800 mb-4">–†–µ–∂–∏–º—ã –≤–æ–ø—Ä–æ—Å–æ–≤ üìù</h3>
              <div className="grid gap-4 md:grid-cols-2">
                <div className="p-4 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg">
                  <h4 className="font-bold text-blue-700">–ê–Ω–≥–ª–∏–π—Å–∫–∏–π ‚Üí –†—É—Å—Å–∫–∏–π</h4>
                  <p className="text-sm text-blue-600">–í–∏–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –∏ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥</p>
                </div>
                <div className="p-4 bg-gradient-to-r from-green-50 to-blue-50 rounded-lg">
                  <h4 className="font-bold text-green-700">–†—É—Å—Å–∫–∏–π ‚Üí –ê–Ω–≥–ª–∏–π—Å–∫–∏–π</h4>
                  <p className="text-sm text-green-600">–í–∏–¥–∏—Ç–µ —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –∏ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ</p>
                </div>
              </div>
            </Card>
            
            <Card className="p-4 sm:p-6">
              <h3 className="text-lg sm:text-xl font-bold text-gray-800 mb-4">–°–∏—Å—Ç–µ–º–∞ –±–∞–ª–ª–æ–≤ ‚≠ê</h3>
              <div className="grid gap-4 md:grid-cols-2">
                <div className="p-4 bg-gradient-to-r from-yellow-50 to-orange-50 rounded-lg border border-yellow-200">
                  <h4 className="font-bold text-yellow-700 mb-2">–ö–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–∞–ª–ª—ã:</h4>
                  <ul className="text-sm text-yellow-600 space-y-1">
                    <li>‚Ä¢ 10 –±–∞–ª–ª–æ–≤ –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç</li>
                    <li>‚Ä¢ +50% –±–æ–Ω—É—Å –∑–∞ 90%+ —Ç–æ—á–Ω–æ—Å—Ç—å</li>
                    <li>‚Ä¢ +20% –±–æ–Ω—É—Å –∑–∞ 80%+ —Ç–æ—á–Ω–æ—Å—Ç—å</li>
                    <li>‚Ä¢ –ë–æ–Ω—É—Å –∑–∞ –¥–ª–∏–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</li>
                  </ul>
                </div>
                <div className="p-4 bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg border border-purple-200">
                  <h4 className="font-bold text-purple-700 mb-2">–ó–∞—â–∏—Ç–∞ –±–∞–Ω–∫–∞ —Å–ª–æ–≤:</h4>
                  <p className="text-sm text-purple-600">
                    –ë–∞–Ω–∫ —Å–ª–æ–≤ –∑–∞—â–∏—â–µ–Ω –ø–∞—Ä–æ–ª–µ–º <code className="bg-purple-100 px-1 rounded">parent123</code>, 
                    —á—Ç–æ–±—ã –¥–µ—Ç–∏ –Ω–µ –º–æ–≥–ª–∏ –∏–∑–º–µ–Ω—è—Ç—å —Å–ª–æ–≤–∞—Ä—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.
                  </p>
                </div>
              </div>
            </Card>
            
            <Card className="p-4 sm:p-6">
              <h3 className="text-lg sm:text-xl font-bold text-gray-800 mb-4">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram üì±</h3>
              <p className="text-sm sm:text-base text-gray-600 mb-4">
                –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Telegram –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
              </p>
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="bot-token">–¢–æ–∫–µ–Ω –±–æ—Ç–∞</Label>
                  <Input
                    id="bot-token"
                    placeholder="1234567890:ABC-DEF1234ghIkl-zyx57W2v1u123ew11"
                    value={telegramBotToken}
                    onChange={(e) => setTelegramBotToken(e.target.value)}
                  />
                  <p className="text-sm text-gray-500">
                    –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram
                  </p>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="chat-id">ID —á–∞—Ç–∞</Label>
                  <Input
                    id="chat-id"
                    placeholder="123456789"
                    value={telegramChatId}
                    onChange={(e) => setTelegramChatId(e.target.value)}
                  />
                  <p className="text-sm text-gray-500">
                    –£–∑–Ω–∞–π—Ç–µ ID —á–∞—Ç–∞ —É @userinfobot
                  </p>
                </div>
                <Button 
                  onClick={() => {
                    if (telegramBotToken && telegramChatId) {
                      alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ Telegram.');
                    } else {
                      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.');
                    }
                  }}
                  className="w-full"
                >
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                </Button>
              </div>
            </Card>

            <Card className="p-4 sm:p-6 bg-gradient-to-r from-green-50 to-blue-50 border-green-200">
              <h3 className="text-lg sm:text-xl font-bold text-green-800 mb-4">üì± –ó–∞–ø—É—Å–∫ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–µ</h3>
              <div className="space-y-3">
                <div className="p-3 bg-white/70 rounded-lg border border-green-200">
                  <h4 className="font-bold text-green-700 mb-2">üåê –ß–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä:</h4>
                  <p className="text-sm text-green-600">
                    –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –ª—é–±–æ–º –±—Ä–∞—É–∑–µ—Ä–µ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ. –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ –º–æ–±–∏–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω.
                  </p>
                </div>
                
                <div className="p-3 bg-white/70 rounded-lg border border-green-200">
                  <h4 className="font-bold text-green-700 mb-2">üì≤ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PWA –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:</h4>
                  <div className="text-sm text-green-600 space-y-1">
                    <p><strong>Android (Chrome):</strong> –ù–∞–∂–º–∏—Ç–µ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" –≤ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–º –æ–∫–Ω–µ</p>
                    <p><strong>iPhone (Safari):</strong> –ü–æ–¥–µ–ª–∏—Ç—å—Å—è ‚Üí "–ù–∞ —ç–∫—Ä–∞–Ω ¬´–î–æ–º–æ–π¬ª"</p>
                  </div>
                </div>
                
                <div className="p-3 bg-white/70 rounded-lg border border-green-200">
                  <h4 className="font-bold text-green-700 mb-2">‚ú® –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ PWA:</h4>
                  <ul className="text-sm text-green-600 space-y-1">
                    <li>‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏</li>
                    <li>‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Å —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞</li>
                    <li>‚Ä¢ –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –∫–∞–∫ —É –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</li>
                    <li>‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ</li>
                  </ul>
                </div>
              </div>
            </Card>
          </div>
        )}
      </main>
      <ToastContainer />
      <MobileInstallPrompt />
    </div>
  );
}